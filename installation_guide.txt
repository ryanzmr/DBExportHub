# DBExportHub Installation Guide

This guide provides step-by-step instructions for setting up the DBExportHub application on your local machine. DBExportHub is a web-based application for exporting SQL Server data to Excel based on specific conditions.

## Prerequisites

Before you begin, ensure you have the following installed on your system:

- Node.js (v18+)
- Python (v3.8+)
- SQL Server
- ODBC Driver for SQL Server (v17+)
- Git (for cloning the repository)

## Clone the Repository

```bash
git clone <repository-url>
cd DBExportHub
```

## Backend Setup

### 1. Create and Activate a Virtual Environment

#### Windows:
```bash
cd backend
python -m venv venv
venv\Scripts\activate
```

#### Linux/Mac:
```bash
cd backend
python -m venv venv
source venv/bin/activate
```

### 2. Install Backend Dependencies

The backend dependencies are listed in the `requirements.txt` file. Install them using pip:

```bash
pip install -r requirements.txt
```

This will install the following packages:
- fastapi>=0.68.0: Web framework for building APIs
- uvicorn>=0.15.0: ASGI server for running FastAPI
- pyodbc>=4.0.32: For SQL Server connectivity
- pandas>=1.3.3: For data manipulation
- python-dotenv>=0.19.0: For loading environment variables
- pydantic>=1.8.2: For data validation
- openpyxl>=3.0.9: For Excel file generation
- python-multipart>=0.0.5: For handling form data
- numpy>=1.20.0: For numerical operations
- jwt>=1.3.1 and pyjwt>=2.1.0: For authentication
- pathlib>=1.0.1: For file path operations
- uuid>=1.30: For generating unique identifiers

### 3. Configure Environment Variables (if needed)

Create a `.env` file in the backend directory with any necessary environment variables for your setup.

### 4. Run the Backend Server

```bash
uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
```

The backend server will start running at http://localhost:8000.

## Frontend Setup

### 1. Navigate to the Frontend Directory

```bash
cd ../frontend
```

### 2. Install Frontend Dependencies

The frontend dependencies are listed in the `package.json` file. Install them using npm:

```bash
npm install
```

This will install all the required packages including:
- React (v18.2.0) and React DOM
- Material-UI (v5.16.14) components and icons
- MUI Data Grid (v7.27.2) for data display
- MUI Date Pickers Pro (v7.27.1) for date selection
- Axios (v1.4.0) for API calls
- React Router (v6.11.1) for navigation
- Day.js (v1.11.13) for date handling
- TypeScript support
- Vite (v6.2.0) as the build tool

### 3. Configure Environment Variables

Create a `.env` file in the frontend directory based on the `.env.example` file:

```bash
cp .env.example .env
```

Edit the `.env` file to set the API URL (default is http://localhost:8000):

```
VITE_API_URL=http://localhost:8000
```

### 4. Run the Frontend Development Server

```bash
npm run dev
```

The frontend development server will start running at http://localhost:3000.

## Accessing the Application

Once both the backend and frontend servers are running, you can access the application by opening your web browser and navigating to http://localhost:3000.

## Building for Production

### Backend

For production, you might want to run the backend without the `--reload` flag:

```bash
uvicorn app.main:app --host 0.0.0.0 --port 8000
```

Or use a production ASGI server like Gunicorn with Uvicorn workers.

### Frontend

To build the frontend for production:

```bash
cd frontend
npm run build
```

This will create a `dist` directory with optimized production files that can be served by any static file server.

## Troubleshooting

### Common Issues

1. **ODBC Driver Issues**: Ensure you have the correct ODBC Driver for SQL Server installed. The application requires v17 or higher.

2. **Database Connection**: Make sure your SQL Server is running and accessible with the credentials provided.

3. **Port Conflicts**: If the ports 8000 (backend) or 3000 (frontend) are already in use, you may need to change them in the configuration.

4. **Node.js or Python Version**: Ensure you're using compatible versions of Node.js (v18+) and Python (v3.8+).

### Getting Help

If you encounter any issues during installation or setup, please refer to the project documentation or contact the development team for assistance.

## Next Steps

After successful installation, refer to the user documentation for information on how to use the DBExportHub application for exporting SQL Server data to Excel.